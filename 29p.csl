$.\29p                    START      $main           
                          ; 
%unused1                  DS         1               
%UnusedArrayForTest       DS         200             
%unusedchar               DS         1               
%unusedarray              DS         100             
%x1                       DS         1               
%x2                       DS         1               
%y1                       DS         1               
%y2                       DS         1               
%com                      DS         1               
%endflag                  DS         1               
                          ; 
%gcmlcm.a                 DS         1               
%gcmlcm.b                 DS         1               
%gcmlcm.r                 DS         1               
                          ; 
$gcmlcm                   DS         0               
                          RPOP                       
                          ST         GR1, %a         
                          ST         GR1, %b         
#0                        NOP                        
                          CPL        GR1, ONE        
                          JZ         #1              
                          ST         GR1, %r         
                          ST         GR1, %a         
                          ST         GR1, %b         
                          JUMP       #0              
#1                        NOP                        
                          ST         GR1, %gc        
                          ST         GR1, %lc        
                          RET                        
                          ; 
$abs                      DS         0               
                          RPOP                       
                          CPL        GR1, ONE        
                          JZ         #2              
                          ST         GR1, %b         
                          JUMP       #3              
#2                        NOP                        
                          ST         GR1, %b         
#3                        NOP                        
                          RET                        
                          ; 
%gcm.lc                   DS         1               
%gcm.aa                   DS         1               
%gcm.bb                   DS         1               
                          ; 
$gcm                      DS         0               
                          RPOP                       
                          CPL        GR1, ONE        
                          JZ         #4              
                          ST         GR1, %gc        
                          JUMP       #5              
#4                        NOP                        
                          PUSH       GR1             
                          PUSH       GR1             
                          CALL       $abs            
                          PUSH       GR1             
                          PUSH       GR1             
                          CALL       $abs            
                          PUSH       GR1             
                          PUSH       GR1             
                          PUSH       GR1             
                          PUSH       GR1             
                          CALL       $gcmlcm         
#5                        NOP                        
                          RET                        
                          ; 
%lcm.gc                   DS         1               
%lcm.aa                   DS         1               
%lcm.bb                   DS         1               
                          ; 
$lcm                      DS         0               
                          RPOP                       
                          CPL        GR1, ONE        
                          JZ         #6              
                          ST         GR1, %lc        
                          JUMP       #7              
#6                        NOP                        
                          PUSH       GR1             
                          PUSH       GR1             
                          CALL       $abs            
                          PUSH       GR1             
                          PUSH       GR1             
                          CALL       $abs            
                          PUSH       GR1             
                          PUSH       GR1             
                          PUSH       GR1             
                          PUSH       GR1             
                          CALL       $gcmlcm         
#7                        NOP                        
                          RET                        
                          ; 
%reduce.gc                DS         1               
                          ; 
$reduce                   DS         0               
                          RPOP                       
                          CPL        GR1, ONE        
                          JZ         #8              
                          ST         GR1, %a2        
                          RET                        
                          JUMP       #9              
#8                        NOP                        
#9                        NOP                        
                          CPL        GR1, ONE        
                          JZ         #10             
                          ST         GR1, %a1        
                          RET                        
                          JUMP       #11             
#10                       NOP                        
#11                       NOP                        
                          CPL        GR1, ONE        
                          JZ         #12             
                          ST         GR1, %a1        
                          ST         GR1, %a2        
                          JUMP       #13             
#12                       NOP                        
#13                       NOP                        
                          PUSH       GR1             
                          PUSH       GR1             
                          PUSH       GR1             
                          CALL       $gcm            
                          ST         GR1, %a1        
                          ST         GR1, %a2        
                          RET                        
                          ; 
%sum.lc                   DS         1               
%sum.y11                  DS         1               
                          ; 
$sum                      DS         0               
                          RPOP                       
                          PUSH       GR1             
                          PUSH       GR1             
                          PUSH       GR1             
                          CALL       $lcm            
                          ST         GR1, %x1        
                          ST         GR1, %y11       
                          ST         GR1, %x1        
                          ST         GR1, %x2        
                          PUSH       GR1             
                          PUSH       GR1             
                          CALL       $reduce         
                          RET                        
                          ; 
%sub.lc                   DS         1               
%sub.y11                  DS         1               
                          ; 
$sub                      DS         0               
                          RPOP                       
                          PUSH       GR1             
                          PUSH       GR1             
                          PUSH       GR1             
                          PUSH       GR1             
                          CALL       $sum            
                          RET                        
                          ; 
%mult.gc                  DS         1               
%mult.y22                 DS         1               
%mult.y11                 DS         1               
                          ; 
$mult                     DS         0               
                          RPOP                       
                          PUSH       GR1             
                          PUSH       GR1             
                          PUSH       GR1             
                          CALL       $gcm            
                          ST         GR1, %x1        
                          ST         GR1, %y22       
                          PUSH       GR1             
                          PUSH       GR1             
                          PUSH       GR1             
                          CALL       $gcm            
                          ST         GR1, %x2        
                          ST         GR1, %y11       
                          ST         GR1, %x1        
                          ST         GR1, %x2        
                          PUSH       GR1             
                          PUSH       GR1             
                          CALL       $reduce         
                          RET                        
                          ; 
$divide                   DS         0               
                          RPOP                       
                          PUSH       GR1             
                          PUSH       GR1             
                          PUSH       GR1             
                          PUSH       GR1             
                          CALL       $mult           
                          RET                        
                          ; 
$printfinal               DS         0               
                          RPOP                       
                          CPL        GR1, ONE        
                          JZ         #14             
                          JUMP       #15             
#14                       NOP                        
                          CPL        GR1, ONE        
                          JZ         #16             
                          JUMP       #17             
#16                       NOP                        
#17                       NOP                        
#15                       NOP                        
                          RET                        
                          ; 
$printtemp                DS         0               
                          RPOP                       
                          CPL        GR1, ONE        
                          JZ         #18             
                          JUMP       #19             
#18                       NOP                        
                          CPL        GR1, ONE        
                          JZ         #20             
                          JUMP       #21             
#20                       NOP                        
#21                       NOP                        
#19                       NOP                        
                          RET                        
                          ; 
$main                     DS         0               
                          ST         GR1, %x1        
                          ST         GR1, %x2        
                          ST         GR1, %endflag   
#22                       NOP                        
                          CPL        GR1, ONE        
                          JZ         #23             
                          ST         GR1, %y2        
                          CPL        GR1, ONE        
                          JZ         #24             
                          ST         GR1, %x1        
                          ST         GR1, %x2        
                          JUMP       #25             
#24                       NOP                        
                          CPL        GR1, ONE        
                          JZ         #26             
                          PUSH       GR1             
                          PUSH       GR1             
                          PUSH       GR1             
                          PUSH       GR1             
                          CALL       $sum            
                          JUMP       #27             
#26                       NOP                        
                          CPL        GR1, ONE        
                          JZ         #28             
                          PUSH       GR1             
                          PUSH       GR1             
                          PUSH       GR1             
                          PUSH       GR1             
                          CALL       $sub            
                          JUMP       #29             
#28                       NOP                        
                          CPL        GR1, ONE        
                          JZ         #30             
                          PUSH       GR1             
                          PUSH       GR1             
                          PUSH       GR1             
                          PUSH       GR1             
                          CALL       $mult           
                          JUMP       #31             
#30                       NOP                        
                          CPL        GR1, ONE        
                          JZ         #32             
                          PUSH       GR1             
                          PUSH       GR1             
                          PUSH       GR1             
                          PUSH       GR1             
                          CALL       $divide         
                          JUMP       #33             
#32                       NOP                        
                          CPL        GR1, ONE        
                          JZ         #34             
                          ST         GR1, %endflag   
                          JUMP       #35             
#34                       NOP                        
#35                       NOP                        
#33                       NOP                        
#31                       NOP                        
#29                       NOP                        
#27                       NOP                        
#25                       NOP                        
                          CPL        GR1, ONE        
                          JZ         #36             
                          PUSH       GR1             
                          PUSH       GR1             
                          CALL       $printfinal     
                          JUMP       #37             
#36                       NOP                        
                          PUSH       GR1             
                          PUSH       GR1             
                          CALL       $printtemp      
#37                       NOP                        
                          JUMP       #22             
#23                       NOP                        
                          END                        
; ------------------------
; Utility functions
; ------------------------
EOVF            CALL    WRITELINE
                LAD     gr1, EOVF1
                LD      gr2, gr0
                CALL    WRITESTR
                CALL    WRITELINE
                SVC     1  ;  overflow error stop
EOVF1           DC      '***** Run-Time Error : Overflow *****'
E0DIV           JNZ     EOVF
                CALL    WRITELINE
                LAD     gr1, E0DIV1
                LD      gr2, gr0
                CALL    WRITESTR
                CALL    WRITELINE
                SVC     2  ;  0-divide error stop
E0DIV1          DC      '***** Run-Time Error : Zero-Divide *****'
EROV            CALL    WRITELINE
                LAD     gr1, EROV1
                LD      gr2, gr0
                CALL    WRITESTR
                CALL    WRITELINE
                SVC     3  ;  range-over error stop
EROV1           DC      '***** Run-Time Error : Range-Over in Array Index *****'
; gr1の値（文字）をgr2のけた数で出力する．
; gr2が0なら必要最小限の桁数で出力する
WRITECHAR       RPUSH
                LD      gr6, SPACE
                LD      gr7, OBUFSIZE
WC1             SUBA    gr2, ONE  ; while(--c > 0) {
                JZE     WC2
                JMI     WC2
                ST      gr6, OBUF,gr7  ;  *p++ = ' ';
                CALL    BOVFCHECK
                JUMP    WC1  ; }
WC2             ST      gr1, OBUF,gr7  ; *p++ = gr1;
                CALL    BOVFCHECK
                ST      gr7, OBUFSIZE
                RPOP
                RET
; gr1が指す文字列をgr2のけた数で出力する．
; gr2が0なら必要最小限の桁数で出力する
WRITESTR        RPUSH
                LD      gr6, gr1  ; p = gr1;
WS1             LD      gr4, 0,gr6  ; while(*p != 0) {
                JZE     WS2
                ADDA    gr6, ONE  ;  p++;
                SUBA    gr2, ONE  ;  c--;
                JUMP    WS1  ; }
WS2             LD      gr7, OBUFSIZE  ; q = OBUFSIZE;
                LD      gr5, SPACE
WS3             SUBA    gr2, ONE  ; while(--c >= 0) {
                JMI     WS4
                ST      gr5, OBUF,gr7  ;  *q++ = ' ';
                CALL    BOVFCHECK
                JUMP    WS3  ; }
WS4             LD      gr4, 0,gr1  ; while(*gr1 != 0) {
                JZE     WS5
                ST      gr4, OBUF,gr7  ;  *q++ = *gr1++;
                ADDA    gr1, ONE
                CALL    BOVFCHECK
                JUMP    WS4  ; }
WS5             ST      gr7, OBUFSIZE  ; OBUFSIZE = q;
                RPOP
                RET
BOVFCHECK       ADDA    gr7, ONE
                CPA     gr7, BOVFLEVEL
                JMI     BOVF1
                CALL    WRITELINE
                LD      gr7, OBUFSIZE
BOVF1           RET
BOVFLEVEL       DC      256
; gr1の値（整数）をgr2のけた数で出力する．
; gr2が0なら必要最小限の桁数で出力する
WRITEINT        RPUSH
                LD      gr7, gr0  ; flag = 0;
                CPA     gr1, gr0  ; if(gr1>=0) goto WI1;
                JPL     WI1
                JZE     WI1
                LD      gr4, gr0  ; gr1= - gr1;
                SUBA    gr4, gr1
                CPA     gr4, gr1
                JZE     WI6
                LD      gr1, gr4
                LD      gr7, ONE  ; flag = 1;
WI1             LD      gr6, SIX  ; p = INTBUF+6;
                ST      gr0, INTBUF,gr6  ; *p = 0;
                SUBA    gr6, ONE  ; p--;
                CPA     gr1, gr0  ; if(gr1 == 0)
                JNZ     WI2
                LD      gr4, ZERO  ;  *p = '0';
                ST      gr4, INTBUF,gr6
                JUMP    WI5  ; }
; else {
WI2             CPA     gr1, gr0  ;  while(gr1 != 0) {
                JZE     WI3
                LD      gr5, gr1  ;   gr5 = gr1 - (gr1 / 10) * 10;
                DIVA    gr1, TEN  ;   gr1 /= 10;
                LD      gr4, gr1
                MULA    gr4, TEN
                SUBA    gr5, gr4
                ADDA    gr5, ZERO  ;   gr5 += '0';
                ST      gr5, INTBUF,gr6  ;   *p = gr5;
                SUBA    gr6, ONE  ;   p--;
                JUMP    WI2  ;  }
WI3             CPA     gr7, gr0  ;  if(flag != 0) {
                JZE     WI4
                LD      gr4, MINUS  ;   *p = '-';
                ST      gr4, INTBUF,gr6
                JUMP    WI5  ;  }
WI4             ADDA    gr6, ONE  ;  else p++;
; }
WI5             LAD     gr1, INTBUF,gr6  ; gr1 = p;
                CALL    WRITESTR  ; WRITESTR();
                RPOP
                RET
WI6             LAD     gr1, MMINT
                CALL    WRITESTR  ; WRITESTR();
                RPOP
                RET
MMINT           DC      '-32768'
; gr1の値（真理値）が0なら'FALSE'を
; 0以外なら'TRUE'をgr2のけた数で出力する．
; gr2が0なら必要最小限の桁数で出力する
WRITEBOOL       RPUSH
                CPA     gr1, gr0  ; if(gr1 != 0)
                JZE     WB1
                LAD     gr1, WBTRUE  ;  gr1 = TRUE;
                JUMP    WB2
; else
WB1             LAD     gr1, WBFALSE  ;  gr1 = FALSE;
WB2             CALL    WRITESTR  ; WRITESTR();
                RPOP
                RET
WBTRUE          DC      'TRUE'
WBFALSE         DC      'FALSE'
; 改行を出力する
WRITELINE       RPUSH
                LD      gr7, OBUFSIZE
                LD      gr6, NEWLINE
                ST      gr6, OBUF,gr7
                ADDA    gr7, ONE
                ST      gr7, OBUFSIZE
                OUT     OBUF, OBUFSIZE
                ST      gr0, OBUFSIZE
                RPOP
                RET
FLUSH           RPUSH
                LD      gr7, OBUFSIZE
                JZE     FL1
                CALL    WRITELINE
FL1             RPOP
                RET
; gr1が指す番地に文字一つを読み込む
READCHAR        RPUSH
                LD      gr5, RPBBUF  ; if(RPBBUF != 0) {
                JZE     RC0
                ST      gr5, 0,gr1  ;  *gr1 = RPBBUF;
                ST      gr0, RPBBUF  ;  RPBBUF = 0
                JUMP    RC3  ;  return; }
RC0             LD      gr7, INP  ; inp = INP;
                LD      gr6, IBUFSIZE  ; if(IBUFSIZE == 0) {
                JNZ     RC1
                IN      IBUF, IBUFSIZE  ;  IN();
                LD      gr7, gr0  ;  inp = 0;
; }
RC1             CPA     gr7, IBUFSIZE  ; if(inp == IBUFSIZE) {
                JNZ     RC2
                LD      gr5, NEWLINE  ;  *gr1 = '\n';
                ST      gr5, 0,gr1
                ST      gr0, IBUFSIZE  ;  IBUFSIZE = INP = 0;
                ST      gr0, INP
                JUMP    RC3  ; }
; else {
RC2             LD      gr5, IBUF,gr7  ;  *gr1 = *inp++;
                ADDA    gr7, ONE
                ST      gr5, 0,gr1
                ST      gr7, INP  ;  INP = inp;
; }
RC3             RPOP
                RET
; gr1が指す番地に整数値一つを読み込む
READINT         RPUSH
; do {
RI1             CALL    READCHAR  ;  ch = READCHAR();
                LD      gr7, 0,gr1
                CPA     gr7, SPACE  ; } while(ch==' ' || ch=='\t' || ch=='\n');
                JZE     RI1
                CPA     gr7, TAB
                JZE     RI1
                CPA     gr7, NEWLINE
                JZE     RI1
                LD      gr5, ONE  ; flag = 1
                CPA     gr7, MINUS  ; if(ch == '-') {
                JNZ     RI4
                LD      gr5, gr0  ;  flag = 0;
                CALL    READCHAR  ;  ch = READCHAR();
                LD      gr7, 0,gr1
RI4             LD      gr6, gr0  ; v = 0;     ; }
RI2             CPA     gr7, ZERO  ; while('0' <= ch && ch <= '9') {
                JMI     RI3
                CPA     gr7, NINE
                JPL     RI3
                MULA    gr6, TEN  ;  v = v*10+ch-'0';
                ADDA    gr6, gr7
                SUBA    gr6, ZERO
                CALL    READCHAR  ;  ch = READSCHAR();
                LD      gr7, 0,gr1
                JUMP    RI2  ; }
RI3             ST      gr7, RPBBUF  ; ReadPushBack();
                ST      gr6, 0,gr1  ; *gr1 = v;
                CPA     gr5, gr0  ; if(flag == 0) {
                JNZ     RI5
                SUBA    gr5, gr6  ;  *gr1 = -v;
                ST      gr5, 0,gr1
; }
RI5             RPOP
                RET
; 入力を改行コードまで（改行コードも含む）読み飛ばす
READLINE        ST      gr0, IBUFSIZE
                ST      gr0, INP
                ST      gr0, RPBBUF
                RET
ONE             DC      1
SIX             DC      6
TEN             DC      10
SPACE           DC      #0020  ; ' '
MINUS           DC      #002D  ; '-'
TAB             DC      #0009  ; '\t'
ZERO            DC      #0030  ; '0'
NINE            DC      #0039  ; '9'
NEWLINE         DC      #000A  ; '\n'
INTBUF          DS      8
OBUFSIZE        DC      0
IBUFSIZE        DC      0
INP             DC      0
OBUF            DS      257
IBUF            DS      257
RPBBUF          DC      0
